from telegram.ext import CommandHandler, ConversationHandler, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import asyncio
import database

logger = logging.getLogger(__name__)
from mixpanel import Mixpanel
mp = Mixpanel("4acbbf84b424e3265bcc39e82cb3634b")
db = database.Database()

STEPS = [
    {
        "text": ["–ü—Ä–∏–≤–µ—Ç, —è Chatty - –±–æ—Ç –¥–ª—è –±–æ–ª—Ç–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!"],
        "button": "–ü—Ä–∏–≤–µ—Ç",
    },
    {
        "text": [
            "–í—Å–µ–º –∫—Ç–æ –∏–∑—É—á–∞–µ—Ç —è–∑—ã–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏. –Ø –ø–æ–º–æ–≥—É —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! –ú–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –∏ –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É.",
            "–ù–µ –±–æ–π—Å—è –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏, –¥–æ–ª–≥–æ –¥—É–º–∞—Ç—å –∏–ª–∏ —Å–±–∏–≤–∞—Ç—å—Å—è —Å —Ç–µ–º—ã. –ì–æ–≤–æ—Ä–∏ –Ω–∞ –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–±–µ —Ç–µ–º—É, –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π, –ø—Ä–æ—Å–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!",
            "–£ –º–µ–Ω—è –º–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üòä"
        ],
        "button": "–ö—Ä—É—Ç–æ",
    },
    {
        "text": [
            "–°—Ç–∞—Ä–∞–π—Å—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–µ—á–∏.",
            "–°—Ç—Ä–æ–π –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏. –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.",
            "–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ–±—è!"
        ],
        "button": "–ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è!",
    },
    {
        "text": [
            "–£ –±–æ—Ç–∞ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
            "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.\n/topics - –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫—É—é-—Ç–æ —Ç–µ–º—É.\n/dict –°–ª–æ–≤–æ - –°–ø—Ä–æ—Å–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞.\n/stats - –£–∑–Ω–∞—Ç—å —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "–•–æ—á–µ—à—å –Ω–æ–≤—É—é —Ç–µ–º—É - —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏: \"Let's talk about travelling to London\"",
            "–ù–µ –∑–Ω–∞–µ—à—å —Å–ª–æ–≤–æ? –°–∫–∞–∂–∏: \"Explain the word Itinerary\""
        ],
        "button": "–°—É–ø–µ—Ä!",
    },
    {
        "text": [
            "–°–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —è –ø–µ—Ä–µ–π–¥—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:)",
            "–ü–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—É–¥–µ—Ç —Ç—è–∂–µ–ª–æ, –Ω–æ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø –æ–±—É—á–µ–Ω–∏—è, —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—â–∞—Ç—å—Å—è —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥–∫–æ! –ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—Ä–∞—Å—ã–≤–∞–π –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã.",
            "–î–µ—Ç–∏ —É—á–∞—Ç —è–∑—ã–∫ –Ω–µ –∑–Ω–∞—è –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ —É –Ω–∏—Ö –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ üôÇ"
        ],
        "button": "Let's start!",
    },
    {
        "text": ["Now let's finally chat in English! Please tell me about yourself! What is your name? Where are you from?"],
    }
]

async def handler(update, context, step_index):

    #migration
    if step_index == 0 and db.check_if_user_exists(update.message.from_user.id):
        # update.message.from_user.id exists only in index 0
        last_message = db.get_dialog_messages(update.message.from_user.id, dialog_id=None)[-1]['bot']
        if  last_message is not None:
            await context.bot.send_message(update.message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π /new")
            await context.bot.send_message(update.message.from_user.id, last_message)
            return ConversationHandler.END

    step = STEPS[step_index]
    query = update
    if step_index == 0:
        tracking_id = 0
        if context.args and len(context.args):
            tracking_id = context.args[0]
        mp.track(update.message.from_user.id, 'onboarding', {
            "step": str(step_index),
            "tracking_id": tracking_id
        })
        mp.people_set(update.message.from_user.id, {
            "tracking_id": tracking_id
        })
    else:
        query = update.callback_query
        await query.answer()
        mp.track(update.callback_query.from_user.id, 'onboarding', {
            "step": str(step_index),
        })

    for text in step["text"]:
        if text == step["text"][-1] and "button" in step:
            keyboard = [[InlineKeyboardButton(step["button"], callback_data=str(step_index + 1))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(text, reply_markup=reply_markup)
        else:
            await query.message.reply_text(text)
            await asyncio.sleep(2)

    return step_index + 1 if step_index + 1 < len(STEPS) else ConversationHandler.END

conversation_handler = ConversationHandler(
    entry_points=[CommandHandler('start', lambda u, c: handler(u, c, 0))],
    states={i: [CallbackQueryHandler(lambda u, c, i=i: handler(u, c, i), pattern=f'^{i}$')] for i in range(1, len(STEPS))},
    fallbacks=[CommandHandler('start', lambda u, c: handler(u, c, 0))],
)
